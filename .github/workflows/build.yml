name: cpp-cmake-mingw-prebuilt-release-actions-workflow
on:
  push:
    # Sequence of patterns matched against refs/tags
    tags:
      - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10
      - 'c*'

permissions:
    contents: write
    
jobs:
  build:
    strategy:
      matrix:
        compiler:
        - {
            name: "x86_64-8.1.0-release-posix-seh-rt_v6-rev0",
            url: "https://github.com/dirkarnez/cpp-tools/raw/main/x86_64-8.1.0-release-posix-seh-rt_v6-rev0.7z"
          }
        - {
            name: "winlibs-x86_64-posix-seh-gcc-11.2.0-mingw-w64-9.0.0-r1",
            url: "https://github.com/brechtsanders/winlibs_mingw/releases/download/11.2.0-12.0.1-9.0.0-r1/winlibs-x86_64-posix-seh-gcc-11.2.0-mingw-w64-9.0.0-r1.zip"
          }
        # - {
        #     name: "msvc2019"
        #   }

 #-DASIO_DISABLE_EPOLL -DASIO_DISABLE_KQUEUE
 
    runs-on: windows-latest
    env:
      CXX: g++
      CXXFLAGS: -Wall -Wextra -D_WIN32_WINNT=0x0601
      libraryName: asio
      installationPath: asio-installation
      tagName: asio-1-28-2
    steps:
      - uses: actions/checkout@v4

      - uses: actions/checkout@v4
        with:
          repository: chriskohlhoff/asio
          path: ${{ env.libraryName }}
          ref: ${{ env.tagName }}
          submodules: true

      - name: download compiler
        if: ${{  matrix.compiler.url }}
        shell: cmd
        run: |
          curl ${{ matrix.compiler.url }} -L --output compiler &&^
          7z.exe x compiler
          
      - name: Install MSYS2
        uses: msys2/setup-msys2@v2
        with:
          msystem: MINGW64
          install: make autoconf automake libtool autogen perl make
          
      - name: set PATH, check mingw version, cmake generate, build and install
        shell: msys2 {0}
        run: |
            workspace=$(pwd) &&
            export PATH="$workspace/mingw64:$workspace/mingw64/bin:$workspace/msys64/usr/bin:/usr/bin" &&
            cd ${{ env.libraryName }}/asio && 
            g++ --version && 
            ./autogen.sh && 
            ./configure --help &&
            ./configure --enable-separate-compilation --prefix="$(pwd)/${{ env.installationPath }}" &&
            make && 
            make install
            
      # - name: copy customized openssl-config.cmake
      #   shell: cmd
      #   run: xcopy /H /Y /C "openssl-config.cmake" "openssl\${{ env.installationPath }}"
        
      # - name: copy customized openssl-config.cmake
      #   shell: cmd
      #   run: xcopy /H /Y /C "openssl-config-version.cmake" "openssl\${{ env.installationPath }}"
        
      - name: Archive Release
        uses: thedoctor0/zip-release@master
        with:
          type: 'zip'
          directory: "${{ env.libraryName }}/asio/${{ env.installationPath }}"
          filename: "${{ env.libraryName }}-${{ github.ref_name }}-${{ matrix.compiler.name }}.zip"
        
      - name: Release prebuilt
        uses: ncipollo/release-action@v1
        with:
          artifacts: "${{ env.libraryName }}/asio/${{ env.installationPath }}/${{ env.libraryName }}-${{ github.ref_name }}-${{ matrix.compiler.name }}.zip"
          allowUpdates: true
          token: ${{ secrets.GITHUB_TOKEN }}
